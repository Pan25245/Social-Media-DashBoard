{"ast":null,"code":"var _jsxFileName = \"/Users/jamiepan/Desktop/Social-Media-DashBoard/frontend/src/snake.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const gridSize = 10; // 10x10 grid\n  const [snake, setSnake] = useState([{\n    x: 0,\n    y: 0\n  }]);\n  const [food, setFood] = useState({\n    x: 5,\n    y: 5\n  });\n  const [direction, setDirection] = useState('RIGHT');\n  const [speed, setSpeed] = useState(200);\n  const [gameOver, setGameOver] = useState(false);\n  const [paused, setPaused] = useState(false);\n  const createFood = () => {\n    let newX = Math.floor(Math.random() * gridSize);\n    let newY = Math.floor(Math.random() * gridSize);\n    setFood({\n      x: newX,\n      y: newY\n    });\n  };\n  const checkCollision = head => {\n    if (head.x < 0 || head.x >= gridSize || head.y < 0 || head.y >= gridSize) {\n      return true;\n    }\n    for (let i = 1; i < snake.length; i++) {\n      if (head.x === snake[i].x && head.y === snake[i].y) {\n        return true;\n      }\n    }\n    return false;\n  };\n  const moveSnake = () => {\n    if (gameOver || paused) return;\n    let newSnake = [...snake];\n    let head = {\n      ...newSnake[0]\n    };\n    switch (direction) {\n      case 'RIGHT':\n        head.x += 1;\n        break;\n      case 'LEFT':\n        head.x -= 1;\n        break;\n      case 'UP':\n        head.y -= 1;\n        break;\n      case 'DOWN':\n        head.y += 1;\n        break;\n      default:\n        break;\n    }\n    if (checkCollision(head)) {\n      setGameOver(true);\n      return;\n    }\n    newSnake.unshift(head);\n    if (head.x === food.x && head.y === food.y) {\n      createFood();\n      setSpeed(speed => speed * 0.95); // Increase speed\n    } else {\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n  };\n  const handleKeyDown = e => {\n    if (!paused) {\n      switch (e.key) {\n        case 'ArrowRight':\n          setDirection('RIGHT');\n          break;\n        case 'ArrowLeft':\n          setDirection('LEFT');\n          break;\n        case 'ArrowUp':\n          setDirection('UP');\n          break;\n        case 'ArrowDown':\n          setDirection('DOWN');\n          break;\n        default:\n          break;\n      }\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n    const gameInterval = setInterval(moveSnake, speed);\n    return () => {\n      clearInterval(gameInterval);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [snake, direction, speed, gameOver, paused]);\n  const handlePauseClick = () => {\n    setPaused(!paused);\n  };\n  const restartGame = () => {\n    setSnake([{\n      x: 0,\n      y: 0\n    }]);\n    setFood({\n      x: 5,\n      y: 5\n    });\n    setDirection('RIGHT');\n    setSpeed(200);\n    setGameOver(false);\n    setPaused(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"snake-game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"snake-game-title\",\n      children: \"Snake Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Game Over! Your Score: \", snake.length - 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button\",\n        onClick: restartGame,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"snake-game-board\",\n        children: [snake.map((segment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"snake-segment\",\n          style: {\n            left: `${segment.x * 20}px`,\n            top: `${segment.y * 20}px`\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"food\",\n          style: {\n            left: `${food.x * 20}px`,\n            top: `${food.y * 20}px`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button\",\n        onClick: handlePauseClick,\n        children: paused ? 'Resume' : 'Pause'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s(SnakeGame, \"wpjsHfHC0NTqR5GUJiWTaSSIfiE=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","SnakeGame","_s","gridSize","snake","setSnake","x","y","food","setFood","direction","setDirection","speed","setSpeed","gameOver","setGameOver","paused","setPaused","createFood","newX","Math","floor","random","newY","checkCollision","head","i","length","moveSnake","newSnake","unshift","pop","handleKeyDown","e","key","document","addEventListener","gameInterval","setInterval","clearInterval","removeEventListener","handlePauseClick","restartGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","segment","index","style","left","top","_c","$RefreshReg$"],"sources":["/Users/jamiepan/Desktop/Social-Media-DashBoard/frontend/src/snake.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst SnakeGame = () => {\n    const gridSize = 10; // 10x10 grid\n    const [snake, setSnake] = useState([{ x: 0, y: 0 }]);\n    const [food, setFood] = useState({ x: 5, y: 5 });\n    const [direction, setDirection] = useState('RIGHT');\n    const [speed, setSpeed] = useState(200);\n    const [gameOver, setGameOver] = useState(false);\n    const [paused, setPaused] = useState(false);\n\n    const createFood = () => {\n        let newX = Math.floor(Math.random() * gridSize);\n        let newY = Math.floor(Math.random() * gridSize);\n        setFood({ x: newX, y: newY });\n    };\n\n    const checkCollision = (head) => {\n        if (head.x < 0 || head.x >= gridSize || head.y < 0 || head.y >= gridSize) {\n            return true;\n        }\n        for (let i = 1; i < snake.length; i++) {\n            if (head.x === snake[i].x && head.y === snake[i].y) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    const moveSnake = () => {\n        if (gameOver || paused) return;\n\n        let newSnake = [...snake];\n        let head = { ...newSnake[0] };\n\n        switch (direction) {\n            case 'RIGHT': head.x += 1; break;\n            case 'LEFT': head.x -= 1; break;\n            case 'UP': head.y -= 1; break;\n            case 'DOWN': head.y += 1; break;\n            default: break;\n        }\n\n        if (checkCollision(head)) {\n            setGameOver(true);\n            return;\n        }\n\n        newSnake.unshift(head);\n        if (head.x === food.x && head.y === food.y) {\n            createFood();\n            setSpeed(speed => speed * 0.95); // Increase speed\n        } else {\n            newSnake.pop();\n        }\n        setSnake(newSnake);\n    };\n\n    const handleKeyDown = (e) => {\n        if (!paused) {\n            switch (e.key) {\n                case 'ArrowRight': setDirection('RIGHT'); break;\n                case 'ArrowLeft': setDirection('LEFT'); break;\n                case 'ArrowUp': setDirection('UP'); break;\n                case 'ArrowDown': setDirection('DOWN'); break;\n                default: break;\n            }\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown);\n        const gameInterval = setInterval(moveSnake, speed);\n\n        return () => {\n            clearInterval(gameInterval);\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [snake, direction, speed, gameOver, paused]);\n\n    const handlePauseClick = () => {\n        setPaused(!paused);\n    };\n\n    const restartGame = () => {\n        setSnake([{ x: 0, y: 0 }]);\n        setFood({ x: 5, y: 5 });\n        setDirection('RIGHT');\n        setSpeed(200);\n        setGameOver(false);\n        setPaused(false);\n    };\n\n    return (\n        <div className=\"snake-game-container\">\n            <h2 className=\"snake-game-title\">Snake Game</h2>\n            {gameOver ? (\n                <div>\n                    <p>Game Over! Your Score: {snake.length - 1}</p>\n                    <button className=\"game-button\" onClick={restartGame}>Restart</button>\n                </div>\n            ) : (\n                <>\n                    <div className=\"snake-game-board\">\n                        {snake.map((segment, index) => (\n                            <div key={index} className=\"snake-segment\" style={{ left: `${segment.x * 20}px`, top: `${segment.y * 20}px` }} />\n                        ))}\n                        <div className=\"food\" style={{ left: `${food.x * 20}px`, top: `${food.y * 20}px` }} />\n                    </div>\n                    <button className=\"game-button\" onClick={handlePauseClick}>{paused ? 'Resume' : 'Pause'}</button>\n                </>\n            )}\n        </div>\n    );\n};\n\n\nexport default SnakeGame;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAG,EAAE,CAAC,CAAC;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC;IAAEW,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC;IAAEW,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAChD,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,OAAO,CAAC;EACnD,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,GAAG,CAAC;EACvC,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACqB,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMuB,UAAU,GAAGA,CAAA,KAAM;IACrB,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGnB,QAAQ,CAAC;IAC/C,IAAIoB,IAAI,GAAGH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGnB,QAAQ,CAAC;IAC/CM,OAAO,CAAC;MAAEH,CAAC,EAAEa,IAAI;MAAEZ,CAAC,EAAEgB;IAAK,CAAC,CAAC;EACjC,CAAC;EAED,MAAMC,cAAc,GAAIC,IAAI,IAAK;IAC7B,IAAIA,IAAI,CAACnB,CAAC,GAAG,CAAC,IAAImB,IAAI,CAACnB,CAAC,IAAIH,QAAQ,IAAIsB,IAAI,CAAClB,CAAC,GAAG,CAAC,IAAIkB,IAAI,CAAClB,CAAC,IAAIJ,QAAQ,EAAE;MACtE,OAAO,IAAI;IACf;IACA,KAAK,IAAIuB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,KAAK,CAACuB,MAAM,EAAED,CAAC,EAAE,EAAE;MACnC,IAAID,IAAI,CAACnB,CAAC,KAAKF,KAAK,CAACsB,CAAC,CAAC,CAACpB,CAAC,IAAImB,IAAI,CAAClB,CAAC,KAAKH,KAAK,CAACsB,CAAC,CAAC,CAACnB,CAAC,EAAE;QAChD,OAAO,IAAI;MACf;IACJ;IACA,OAAO,KAAK;EAChB,CAAC;EAED,MAAMqB,SAAS,GAAGA,CAAA,KAAM;IACpB,IAAId,QAAQ,IAAIE,MAAM,EAAE;IAExB,IAAIa,QAAQ,GAAG,CAAC,GAAGzB,KAAK,CAAC;IACzB,IAAIqB,IAAI,GAAG;MAAE,GAAGI,QAAQ,CAAC,CAAC;IAAE,CAAC;IAE7B,QAAQnB,SAAS;MACb,KAAK,OAAO;QAAEe,IAAI,CAACnB,CAAC,IAAI,CAAC;QAAE;MAC3B,KAAK,MAAM;QAAEmB,IAAI,CAACnB,CAAC,IAAI,CAAC;QAAE;MAC1B,KAAK,IAAI;QAAEmB,IAAI,CAAClB,CAAC,IAAI,CAAC;QAAE;MACxB,KAAK,MAAM;QAAEkB,IAAI,CAAClB,CAAC,IAAI,CAAC;QAAE;MAC1B;QAAS;IACb;IAEA,IAAIiB,cAAc,CAACC,IAAI,CAAC,EAAE;MACtBV,WAAW,CAAC,IAAI,CAAC;MACjB;IACJ;IAEAc,QAAQ,CAACC,OAAO,CAACL,IAAI,CAAC;IACtB,IAAIA,IAAI,CAACnB,CAAC,KAAKE,IAAI,CAACF,CAAC,IAAImB,IAAI,CAAClB,CAAC,KAAKC,IAAI,CAACD,CAAC,EAAE;MACxCW,UAAU,CAAC,CAAC;MACZL,QAAQ,CAACD,KAAK,IAAIA,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;IACrC,CAAC,MAAM;MACHiB,QAAQ,CAACE,GAAG,CAAC,CAAC;IAClB;IACA1B,QAAQ,CAACwB,QAAQ,CAAC;EACtB,CAAC;EAED,MAAMG,aAAa,GAAIC,CAAC,IAAK;IACzB,IAAI,CAACjB,MAAM,EAAE;MACT,QAAQiB,CAAC,CAACC,GAAG;QACT,KAAK,YAAY;UAAEvB,YAAY,CAAC,OAAO,CAAC;UAAE;QAC1C,KAAK,WAAW;UAAEA,YAAY,CAAC,MAAM,CAAC;UAAE;QACxC,KAAK,SAAS;UAAEA,YAAY,CAAC,IAAI,CAAC;UAAE;QACpC,KAAK,WAAW;UAAEA,YAAY,CAAC,MAAM,CAAC;UAAE;QACxC;UAAS;MACb;IACJ;EACJ,CAAC;EAEDf,SAAS,CAAC,MAAM;IACZuC,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEJ,aAAa,CAAC;IACnD,MAAMK,YAAY,GAAGC,WAAW,CAACV,SAAS,EAAEhB,KAAK,CAAC;IAElD,OAAO,MAAM;MACT2B,aAAa,CAACF,YAAY,CAAC;MAC3BF,QAAQ,CAACK,mBAAmB,CAAC,SAAS,EAAER,aAAa,CAAC;IAC1D,CAAC;EACL,CAAC,EAAE,CAAC5B,KAAK,EAAEM,SAAS,EAAEE,KAAK,EAAEE,QAAQ,EAAEE,MAAM,CAAC,CAAC;EAE/C,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM;IAC3BxB,SAAS,CAAC,CAACD,MAAM,CAAC;EACtB,CAAC;EAED,MAAM0B,WAAW,GAAGA,CAAA,KAAM;IACtBrC,QAAQ,CAAC,CAAC;MAAEC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC,CAAC,CAAC;IAC1BE,OAAO,CAAC;MAAEH,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC,CAAC;IACvBI,YAAY,CAAC,OAAO,CAAC;IACrBE,QAAQ,CAAC,GAAG,CAAC;IACbE,WAAW,CAAC,KAAK,CAAC;IAClBE,SAAS,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,oBACInB,OAAA;IAAK6C,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACjC9C,OAAA;MAAI6C,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC/ClC,QAAQ,gBACLhB,OAAA;MAAA8C,QAAA,gBACI9C,OAAA;QAAA8C,QAAA,GAAG,yBAAuB,EAACxC,KAAK,CAACuB,MAAM,GAAG,CAAC;MAAA;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChDlD,OAAA;QAAQ6C,SAAS,EAAC,aAAa;QAACM,OAAO,EAAEP,WAAY;QAAAE,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC,gBAENlD,OAAA,CAAAE,SAAA;MAAA4C,QAAA,gBACI9C,OAAA;QAAK6C,SAAS,EAAC,kBAAkB;QAAAC,QAAA,GAC5BxC,KAAK,CAAC8C,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBACtBtD,OAAA;UAAiB6C,SAAS,EAAC,eAAe;UAACU,KAAK,EAAE;YAAEC,IAAI,EAAG,GAAEH,OAAO,CAAC7C,CAAC,GAAG,EAAG,IAAG;YAAEiD,GAAG,EAAG,GAAEJ,OAAO,CAAC5C,CAAC,GAAG,EAAG;UAAI;QAAE,GAApG6C,KAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAiG,CACnH,CAAC,eACFlD,OAAA;UAAK6C,SAAS,EAAC,MAAM;UAACU,KAAK,EAAE;YAAEC,IAAI,EAAG,GAAE9C,IAAI,CAACF,CAAC,GAAG,EAAG,IAAG;YAAEiD,GAAG,EAAG,GAAE/C,IAAI,CAACD,CAAC,GAAG,EAAG;UAAI;QAAE;UAAAsC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrF,CAAC,eACNlD,OAAA;QAAQ6C,SAAS,EAAC,aAAa;QAACM,OAAO,EAAER,gBAAiB;QAAAG,QAAA,EAAE5B,MAAM,GAAG,QAAQ,GAAG;MAAO;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA,eACnG,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC9C,EAAA,CAhHID,SAAS;AAAAuD,EAAA,GAATvD,SAAS;AAmHf,eAAeA,SAAS;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}