{"ast":null,"code":"var _jsxFileName = \"/Users/jamiepan/Desktop/Social-Media-DashBoard/frontend/src/snake.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const [snake, setSnake] = useState([{\n    x: 0,\n    y: 0\n  }]);\n  const [food, setFood] = useState({\n    x: 5,\n    y: 5\n  });\n  const [direction, setDirection] = useState('RIGHT');\n  const [speed, setSpeed] = useState(200);\n  const createFood = () => {\n    // Randomize food position\n    let newX = Math.floor(Math.random() * 10);\n    let newY = Math.floor(Math.random() * 10);\n    setFood({\n      x: newX,\n      y: newY\n    });\n  };\n  const moveSnake = () => {\n    let newSnake = [...snake];\n    let head = {\n      ...newSnake[0]\n    };\n    switch (direction) {\n      case 'RIGHT':\n        head.x += 1;\n        break;\n      case 'LEFT':\n        head.x -= 1;\n        break;\n      case 'UP':\n        head.y -= 1;\n        break;\n      case 'DOWN':\n        head.y += 1;\n        break;\n      default:\n        break;\n    }\n    newSnake.unshift(head);\n    newSnake.pop();\n    setSnake(newSnake);\n\n    // Check if snake eats food\n    if (head.x === food.x && head.y === food.y) {\n      newSnake.push({});\n      setSnake(newSnake);\n      createFood();\n    }\n  };\n  useEffect(() => {\n    const handleKeyDown = e => {\n      switch (e.key) {\n        case 'ArrowRight':\n          setDirection('RIGHT');\n          break;\n        case 'ArrowLeft':\n          setDirection('LEFT');\n          break;\n        case 'ArrowUp':\n          setDirection('UP');\n          break;\n        case 'ArrowDown':\n          setDirection('DOWN');\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    const gameInterval = setInterval(moveSnake, speed);\n    return () => {\n      clearInterval(gameInterval);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [snake, direction, speed]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '200px',\n      height: '200px',\n      border: '1px solid black'\n    },\n    children: [snake.map((segment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '20px',\n        height: '20px',\n        backgroundColor: 'green',\n        position: 'absolute',\n        left: `${segment.x * 20}px`,\n        top: `${segment.y * 20}px`\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '20px',\n        height: '20px',\n        backgroundColor: 'red',\n        position: 'absolute',\n        left: `${food.x * 20}px`,\n        top: `${food.y * 20}px`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(SnakeGame, \"4gx26RSdd2l49/dVb0nPnW/N/98=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SnakeGame","_s","snake","setSnake","x","y","food","setFood","direction","setDirection","speed","setSpeed","createFood","newX","Math","floor","random","newY","moveSnake","newSnake","head","unshift","pop","push","handleKeyDown","e","key","document","addEventListener","gameInterval","setInterval","clearInterval","removeEventListener","style","width","height","border","children","map","segment","index","backgroundColor","position","left","top","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jamiepan/Desktop/Social-Media-DashBoard/frontend/src/snake.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst SnakeGame = () => {\n    const [snake, setSnake] = useState([{ x: 0, y: 0 }]);\n    const [food, setFood] = useState({ x: 5, y: 5 });\n    const [direction, setDirection] = useState('RIGHT');\n    const [speed, setSpeed] = useState(200);\n\n    const createFood = () => {\n        // Randomize food position\n        let newX = Math.floor(Math.random() * 10);\n        let newY = Math.floor(Math.random() * 10);\n        setFood({ x: newX, y: newY });\n    };\n\n    const moveSnake = () => {\n        let newSnake = [...snake];\n        let head = { ...newSnake[0] };\n\n        switch (direction) {\n            case 'RIGHT':\n                head.x += 1;\n                break;\n            case 'LEFT':\n                head.x -= 1;\n                break;\n            case 'UP':\n                head.y -= 1;\n                break;\n            case 'DOWN':\n                head.y += 1;\n                break;\n            default:\n                break;\n        }\n\n        newSnake.unshift(head);\n        newSnake.pop();\n        setSnake(newSnake);\n\n        // Check if snake eats food\n        if (head.x === food.x && head.y === food.y) {\n            newSnake.push({});\n            setSnake(newSnake);\n            createFood();\n        }\n    };\n\n    useEffect(() => {\n        const handleKeyDown = (e) => {\n            switch (e.key) {\n                case 'ArrowRight':\n                    setDirection('RIGHT');\n                    break;\n                case 'ArrowLeft':\n                    setDirection('LEFT');\n                    break;\n                case 'ArrowUp':\n                    setDirection('UP');\n                    break;\n                case 'ArrowDown':\n                    setDirection('DOWN');\n                    break;\n                default:\n                    break;\n            }\n        };\n\n        document.addEventListener('keydown', handleKeyDown);\n        const gameInterval = setInterval(moveSnake, speed);\n\n        return () => {\n            clearInterval(gameInterval);\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [snake, direction, speed]);\n\n    return (\n        <div style={{ width: '200px', height: '200px', border: '1px solid black' }}>\n            {snake.map((segment, index) => (\n                <div key={index} style={{ \n                    width: '20px', height: '20px', \n                    backgroundColor: 'green', \n                    position: 'absolute', \n                    left: `${segment.x * 20}px`, \n                    top: `${segment.y * 20}px` \n                }} />\n            ))}\n            <div style={{ \n                width: '20px', height: '20px', \n                backgroundColor: 'red', \n                position: 'absolute', \n                left: `${food.x * 20}px`, \n                top: `${food.y * 20}px` \n            }} />\n        </div>\n    );\n};\n\nexport default SnakeGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}